#
# This the default configuration of Flashbot. Override any of these settings in
# your project's application.conf file, usually located at:
#
#   <project root>/src/main/resources/application.conf
#
# Load the config by calling `FlashbotConfig.load()`.
#
flashbot {

  # All nodes in the cluster must use the same system-name in order to be able
  # to discover each other when forming the cluster.
  system-name = "flashbot-system"

  # The directory to store the state for all engines.
  # It will be created if it doesn't exist yet.
  engine-root = ${user.home}"/.flashbot/engines"

  # Strategies available for backtests and bots.
  # The ones listed below are the built-in strategies.
  strategies {
    time_series = "flashbot.strategies.TimeSeriesStrategy"
    dmac_crossover = "flashbot.strategies.DMACStrategy"
    market_maker = "flashbot.strategies.MarketMaker"
  }

  # The configured exchanges available for backtesting and bots.
  # The following exchanges are the built-ins.
  exchanges {
    bitstamp {
      class = "flashbot.exchanges.Bitstamp"
      pairs = ["btc_usd", "eth_usd", "eth_btc", "ltc_usd", "ltc_btc"]
    }

    bitfinex {
      class = "flashbot.exchanges.Bitfinex"
      pairs = ["btc_usd", "eth_usd", "eth_btc", "ltc_usd", "ltc_btc"]
    }

    coinbase {
      class = "flashbot.exchanges.Coinbase"
      pairs = ["btc_usd", "eth_usd", "eth_btc", "ltc_usd", "ltc_btc"]
    }
  }

  # DataSource classes available for data ingest and streaming data to strategies.
  # The following data sources are the built-ins.
  sources {
    bitstamp {
      class = "flashbot.sources.BitstampMarketDataSource"
    }

    bitfinex {
      class = "flashbot.sources.BitfinexMarketDataSource"
    }

    coinbase {
      class = "flashbot.sources.CoinbaseMarketDataSource"
    }
  }

  ingest {
    # Whitelist of data addresses to ingest.
    #
    # Examples:
    #   enabled = ["*/*/*"]
    #   enabled = ["bitmex/xbtusd/ladder", "binance/*/ladder"]
    #   enabled = ["*/*/candles"]
    #
    # Default:
    #   enabled = []
    enabled = []

    # Whitelist of data addresses to backfill. Same matching format as `enabled`.
    backfill = []

    # How long to keep data around for after it was ingested.
    retention = [
      ["*/*/*", "90d"]
    ]
  }

  bots {
    enabled = []
    configs = {}
  }

  # The value of this property is the full path to the database config to be used
  # for market data persistence.
  # E.g. "h2", "postgres", "my-app.db-prod", "my-app.db-staging".
  db = "h2"

  grafana {
    # The port to which hosts the "Flashbot" Grafana data source.
    # Use along with the Simpod JSON Data Source plugin for Grafana.
    data-source-port = null

    # The host and API key of the Grafana installation.
    # This is used by Flashbot to automatically manage dashboards.
    host = "http://localhost:3000"
    api-key = null
  }

  # Flashbot overrides for the Akka configuration. In order to supply these default settings to
  # Akka, it is expected that the actor system will be started using the configuration from the
  # FlashbotConfig like this:
  #
  #   val config = FlashbotConfig.load()
  #   val system = ActorSystem(config.systemName, config.conf)
  #
  akka {
    loglevel = "DEBUG"
    log-dead-letters-during-shutdown = off

    port = 2551

    actor {
      allow-java-serialization = off

      serializers {
        kryo = "com.twitter.chill.akka.AkkaSerializer"
        json = "flashbot.core.CirceAkkaSerializer"
      }

      serialization-bindings {
        "io.circe.Json" = json
        "flashbot.models.api.TradingEngineEvent" = kryo
        "flashbot.models.api.DataServerMessage" = kryo
      }
    }

    persistence {
      journal {
        plugin = "akka.persistence.journal.leveldb"

        leveldb {
          native = off
          dir = ${flashbot.engine-root}"/journal"
          compaction-intervals {
            "*" = 10000
          }
        }
      }

      snapshot-store {
        plugin = "akka.persistence.snapshot-store.local"
        local.dir = ${flashbot.engine-root}"/snapshot-store"
      }
    }
  }

  akka-cluster {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }

    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = 127.0.0.1
        port = ${?akka.port}

        bind-hostname = 127.0.0.1
        bind-port = ${?akka.port}
      }
    }

    cluster {
      seed-nodes = [
        "akka.tcp://flashbot-system@127.0.0.1:2551"
      ]
    }
  }
}

engine-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 64
  }
  throughput = 1
}


# The default database configuration is an in-memory H2 database.
# It's useful for testing in standalone mode.
h2 {
  profile = "slick.jdbc.H2Profile$"
  db {
    connectionPool = disabled
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.h2.Driver"
      url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
    }
  }
}

dbHost = "localhost"
dbPort = "5432"
dbName = "flashbot"
dbUser = "flashbot"
dbPass = "flashbot"

# Use this in production
postgres = {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    properties = {
      databaseName = ${dbName}
      serverName = ${dbHost}
      portNumber = ${dbPort}
      user = ${dbUser}
      password = ${dbPass}
    }
    numThreads = 8
  }
}


