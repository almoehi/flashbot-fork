flashbot {

  # The directory to store the state for all engines.
  # It will be created if it doesn't exist yet.
  engine-root = ${user.home}"/.flashbot/engines"

  # Strategies available for backtests and bots.
  # The ones listed below are the built-in strategies.
  strategies {
    scanner = "com.infixtrading.flashbot.strategies.ScannerStrategy"
    macd_crossover = "com.infixtrading.flashbot.strategies.MACDCrossover"
  }

  # The configured exchanges available for backtesting and bots.
  # The following exchanges are the built-ins.
  exchanges {
    bitstamp {
      class = "com.infixtrading.flashbot.exchanges.Bitstamp"
      pairs = ["btc_usd", "eth_usd", "eth_btc", "ltc_usd", "ltc_btc"]
    }
    bitfinex {
      class = "com.infixtrading.flashbot.exchanges.Bitfinex"
      pairs = ["btc_usd", "eth_usd", "eth_btc", "ltc_usd", "ltc_btc"]
    }
  }

  # DataSource classes available for data ingest and streaming data to strategies.
  # The following data sources are the built-ins.
  sources {
    bitstamp {
      class = "com.infixtrading.flashbot.sources.BitstampMarketDataSource"
    }
    bitfinex {
      class = "com.infixtrading.flashbot.sources.BitfinexMarketDataSource"
    }
  }

  ingest {
    # Whitelist of data addresses to ingest. Used if the "ingest" role is active.
    #
    # Examples:
    #   paths = ["*/*/*"]
    #   paths = ["bitmex/xbtusd/ladder", "binance/*/ladder"]
    #   paths = ["*/*/candles"]
    #
    # Default:
    #   ingest = ["*/*/*"]
    paths = ["*/*/*"]

    # How long to keep data around for after it was ingested.
    retention = "90d"
  }

  bots {
    enabled = []
    configs = {}
  }

  # The default database configuration is an in-memory H2 database.
  # It's useful for testing in standalone mode.
  db {
    profile = "slick.jdbc.H2Profile$"
    db {
      connectionPool = disabled
      dataSourceClass = "slick.jdbc.DriverDataSource"
      properties = {
        driver = "org.h2.Driver"
        url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
      }
    }
  }

  akka {}
}

# The prototype for the Akka configuration. In order to supply these default settings to Akka,
# it is expected that the actor system will be started using the configuration from the
# FlashbotConfig like this:
#
#   val conf = FlashbotConfig.load
#   val system = ActorSystem("my-system", conf.akka)
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "DEBUG"

  log-dead-letters-during-shutdown = off

  actor {
    allow-java-serialization = off

    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
      json = "com.infixtrading.flashbot.serializers.CirceAkkaSerializer"
    }

    serialization-bindings {
      "io.circe.Json" = json
      "com.infixtrading.flashbot.models.api.TradingEngineEvent" = kryo
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"

      leveldb {
        native = off
        dir = ${flashbot.engine-root}"/journal"
        compaction-intervals {
          "*" = 10000
        }
      }
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = ${flashbot.engine-root}"/snapshot-store"
    }
  }
}

